@using Rijkshuisstijl.UrlProtector.Helpers
@using Rijkshuisstijl.UrlProtector.Models
@model Rijkshuisstijl.UrlProtector.ViewModels.UrlProtector.ShowViewModel

@{
    Style.Include("urlprotector");
    Layout.Title = T("Protected url filters");
}

<div id="urlprotector">      
    @{
        <table>
            <tr>
                <th>
                    @T("Url pattern")                
                </th>
                <th>
                    @T("Host address pattern")
                </th>
                <th>
                    @T("User agent pattern")
                </th>
                <th>
                    @T("Description")
                </th>
                <th>
                    @T("Force SSL")
                </th>
                <th>
                    @T("Failure action")
                </th>
                <th>
                    @T("Record action")
                </th>
            </tr>
            @foreach (DashboardFilterRecord dashboardFilterRecord in Model.DashboardFilterRecords)
            {
                <tr>
                    <td>
                        @T("Dashboard")
                    </td>
                    <td>
                        @{string userHostAddressmatch = Model.MatchedUserHostAddressPatterns.Contains(dashboardFilterRecord.UserHostAddressPattern) ? "matched" : "nomatch";
                            <span class="@userHostAddressmatch">@dashboardFilterRecord.UserHostAddressPattern</span>}
                    </td>
                    <td>
                        @{string userAgentmatch = Model.MatchedUserAgentPatterns.Contains(dashboardFilterRecord.UserAgentPattern) ? "matched" : "nomatch";
                            <span class="@userAgentmatch">@dashboardFilterRecord.UserAgentPattern</span>}
                    </td>
                    <td>
                        Dashboard and authorization protection
                    </td>
                    <td class="forcesslcolumn">
                        @{
                            if (dashboardFilterRecord.ForceSsl)
                            {
                                <text>SSL</text>
                            }
                            else
                            {
                                <text>-</text>
                            }
                        }
                    </td>
                    <td class="resultcodecolumn">
                        @{
                            if (dashboardFilterRecord.ReturnStatusNotFound)
                            {
                                <text>Page not found</text>
                            }
                            else
                            {
                                <text>Access denied</text>
                            }
                        }
                    </td>
                    <td class="actioncolumn">
                        @Html.ActionLink(T("Edit").Text, "EditDashboard", "UrlProtector", new {area = "Rijkshuisstijl.UrlProtector"}, null)
                    </td>
                </tr>
            }
            @foreach (UrlFilterRecord urlFilter in Model.UrlFilterRecords.OrderBy(r => r.UrlPriority))
            {
                <tr>
                    <td>
                        @urlFilter.UrlPattern
                    </td>
                    <td>
                        @{string userHostAddressmatch = Model.MatchedUserHostAddressPatterns.Contains(urlFilter.UserHostAddressPattern) ? "matched" : "nomatch";
                            <span class="@userHostAddressmatch">@urlFilter.UserHostAddressPattern</span>}
                    </td>
                    <td>
                        @{string userAgentmatch = Model.MatchedUserAgentPatterns.Contains(urlFilter.UserAgentPattern) ? "matched" : "nomatch";
                            <span class="@userAgentmatch">@urlFilter.UserAgentPattern</span>}
                    </td>
                    <td>
                        @urlFilter.Description
                    </td>
                    <td class="forcesslcolumn">
                        @{
                            if (urlFilter.ForceSsl)
                            {
                                <text>SSL</text>
                            }
                            else
                            {
                                <text>-</text>
                            }
                        }
                    </td>
                    <td class="resultcodecolumn">
                        @((EnumHelper.GetDescription((UrlFilterReturnActionsEnum) urlFilter.FailureAction)))
                        @if ((UrlFilterReturnActionsEnum) urlFilter.FailureAction == UrlFilterReturnActionsEnum.Redirect)
                        {
                            <text> to @urlFilter.RedirectTo</text>
                        }
                    </td>
                    <td class="actioncolumn">
                        @Html.ActionLink(T("Edit").Text, "Edit", "UrlProtector", new {area = "Rijkshuisstijl.UrlProtector", urlFilterId = urlFilter.Id}, null) |
                        @Html.ActionLink(T("Delete").Text, "Delete", "UrlProtector", new {area = "Rijkshuisstijl.UrlProtector", urlFilterId = urlFilter.Id}, null)
                    </td>
                </tr>
            }
        </table>
    }
    @using (Html.BeginFormAntiForgeryPost("NewFilter"))
    {
        <div>
            <button class="primaryAction" type="submit">@T("New filter")</button>
        </div>
    }
    

    <h2>Most recent filtered requests</h2>
    @Html.CreateFilteredRequestTable(Model.FilteredRequestRecords, T)
        

    <!-- Show some info of the current user to see what is supplied to the webserver -->
    @Html.CreateUserInfoTable(Model.CurrentUserHostAddress, Model.CurrentUserAgent, T)
    
</div>